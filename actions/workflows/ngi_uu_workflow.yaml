version: "2.0" # mistral version
name: arteria-packs.ngi_uu_workflow
description: The ngi workflow, from sequencer to remote system...

workflows:

    main:
        type: direct
        input:
            - host
            - runfolder
            - run_type
            - remote_host
            - trigger_ngi_pipeline
        output:
            output_the_whole_workflow_context: <% $ %>
        tasks:
            get_runfolder_name:
                action: core.local
                input:
                    cmd: python -c 'import sys; sys.stdout.write("<% $.runfolder %>".split("/")[-1])'
                publish:
                    runfolder_name: <% $.get_runfolder_name.stdout %>
                    report_err: <% $.get_runfolder_name.stdout %> <% $.get_runfolder_name.stderr %>
                on-success:
                    - get_flowcell_name
                on-error:
                    - print_error

            get_flowcell_name:
                action: arteria-packs.get_flowcell_from_runfolder_name
                input:
                    runfolder_name: < $.runfolder_name >
                publish:
                    flowcell_name: <% $.get_flowcell_name.stdout %>
                    report_err: <% $.get_flowcell_name.stdout %> <% $.get_flowcell_name.stderr %>
                on-success:
                    - demultiplex
                on-error:
                    - print_error

            demultiplex:
                action: arteria-packs.demultiplex
                input:
                    host: "<% $.host %>"
                    runfolder_name: "<% $.runfolder_name %>"
                    run_type: "<% $.run_type %>"
                publish:
                    status_message: "Runfolder <% $.runfolder %> run on <% $.host %>..."
                on-success:
                    - run_sisyphus_quick_report

            run_sisyphus_quick_report:
                action: arteria-packs.sisyphus_quickreport
                input:
                    host:  "<% $.host %>"
                    runfolder:  "<% $.runfolder_name %>"
                publish:
                    siswrap_err: <% $.run_sisyphus_quick_report.output_the_whole_workflow_context %>
                    #report_message: "Report generated for <% $.runfolder %> on <% $.host %>"
                    #report_err: "<% $.run_sisyphus_quick_report.stdout $.run_sisyphus_quick_report.stderr %>"
                on-success:
                    - run_sisyphus_quality_control
                on-error:
                    - print_error

            run_sisyphus_quality_control:
                action: arteria-packs.sisyphus_qc
                input:
                    host: "<% $.host %>"
                    runfolder: "<% $.runfolder_name %>"
                publish:
                    qc_message: "QC and report finished for <% $.runfolder %> on <% $.host %>"
                    siswrap_err: <% $.run_sisyphus_quality_control.output_the_whole_workflow_context %>
                    #qc_err: <% $.run_sisyphus_quality_control.stdout $.run_sisyphus_quality_control.stderr %>
                on-success:
                    - notify
                on-error:
                    - print_error

            #TODO Create list of files to rsync
            create_md5sums_for_transferred_files:
                action: core.remote
                input:
                    cmd: >
                    rsync -vrktp --dry-run --chmod=Dg+sx,ug+w,o-rwx --prune-empty-dirs --include-from <% include_file %> <% runfolder %> /tmp |
                     grep "<% runfolder_name %>" | grep -v "\/$" | xargs -0 -d'\n' md5sum
                publish:
                    md5_sums: <% $.create_md5sums_for_transferred_files.stdout %>

            rsync_to_uppmax:
                action: arteria-packs.rsync
                input:
                    source: <% runfolder %>
                    dest_server: testuppmax
                    destination: /tmp/
                    include_file: /etc/arteria/misc/hiseq.rsync
                    hosts: <% host %>

            rsync_to_summary_host:
                action: arteria-packs.rsync
                input:
                    source: <% runfolder %>
                    dest_server: summary-host
                    destination: /tmp/
                    include_file: /etc/arteria/misc/summary.rsync
                    hosts: <% host %>



            notify:
                action: core.local
                input:
                    cmd: "printf '<% $.qc_message %>'"

            print_error:
                action: core.local
                input:
                    cmd: "printf 'an error occurred: <% $.siswrap_err %>'"

#            run_sisyphus_local_processing:
#                action: arteria-packs.sisyphus_local_processing
#                input:
#                    host:  "<% $.host %>"
#                    runfolder:  "<% $.runfolder %>"
#                on-success:
#                    - start_ngi_pipeline

            # TODO Split out the ngi pipeline processing stuff..
            #            start_ngi_pipeline:
            #                action: core.http
            #                input:
            #                    url: "http://www.uu.se"
            #                    url: "http://localhost:9101/v1/webhooks/ngi_pipeline"
            #                    method: "POST"
            #                    headers: "X-Auth-Token={{system.st2_auth_token}}&Content-Type=application/json"
            #                    body: '{ "start_ngi_pipeline": "<% $.trigger_ngi_pipeline %>" }'
