version: "2.0" # mistral version
name: arteria-packs.ngi_uu_workflow
description: The ngi workflow, from sequencer to remote system...

workflows:
    main:
        type: direct
        input:
            - host
            - runfolder
            - ignore_sisyphus_qc_result
            - bcl2fastq_version
            - barcode_mismatches
            - tiles
            - use_base_mask
            - bcl2fastq_additional_arguments
            - conversionstats_swap_read_nr
            - conversionstats_swap_read_from
            - conversionstats_swap_read_to
            - skip_archiving
            - remove_previous_archive_dir  
        output:
            output_the_whole_workflow_context: <% $ %>
        task-defaults:
            on-error:
                - oh_shit_error
                - mark_as_failed

        tasks:
            ### GENERAL TASKS START ###
            note_workflow_repo_version:
              action: core.local
              input:
                cmd: git rev-parse HEAD
                cwd: /opt/stackstorm/packs/arteria-packs/
              on-success:
                - get_config

            get_config:
              action: arteria-packs.get_pack_config
              publish:
                hermes_base_url: <% task(get_config).result.result.hermes_base_url %>
                hermes_user: <% task(get_config).result.result.hermes_user %>
                hermes_token: <% task(get_config).result.result.hermes_token %>
                remote_host: <% task(get_config).result.result.remote_host %>
                remote_user: <% task(get_config).result.result.remote_user%>
                remote_destination: <% task(get_config).result.result.remote_destination %>
                summary_host: <% task(get_config).result.result.summary_host %>
                summary_user: <% task(get_config).result.result.summary_user %>
                summary_destination: <% task(get_config).result.result.summary_destination %>
                siswrap_service_port: <% task(get_config).result.result.siswrap_service_port %>
                bcl2fastq_service_port: <% task(get_config).result.result.bcl2fastq_service_port %>
                runfolder_service_port: <% task(get_config).result.result.runfolder_service_port %>
                send_mail_to: <% task(get_config).result.result.send_mail_to %>
                remote_sisyphus_location: <% task(get_config).result.result.remote_sisyphus_location %>
                irma_remote_path: <% task(get_config).result.result.irma_remote_path %>
                irma_api_key: <% task(get_config).result.result.irma_api_key %>
                irma_checksum_base_url: <% task(get_config).result.result.irma_checksum_base_url %>
                irma_siswrap_base_url: <% task(get_config).result.result.irma_siswrap_base_url %>
                ngi_pipeline_url: <% task(get_config).result.result.ngi_pipeline_url %>
                irma_replace_expressions: <% task(get_config).result.result.irma_replace_expressions %>
                remote_host_key: <% task(get_config).result.result.remote_host_key %>
              on-success:
                 - mark_as_started

            mark_as_started:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "started"}'
                method: "POST"
              on-success:
                - get_runfolder_name

            get_runfolder_name:
              action: core.local
              input:
                cmd: python -c 'import sys; sys.stdout.write("<% $.runfolder %>".split("/")[-1])'
              publish:
                runfolder_name: "<% task(get_runfolder_name).result.stdout %>"
              on-success:
                - get_flowcell_name

            get_flowcell_name:
                action: arteria-packs.get_flowcell_from_runfolder_name
                input:
                    runfolder_name: <% $.runfolder_name %>
                publish:
                    flowcell_name: <% task(get_flowcell_name).result.result %>
                on-success:
                    - download_samplesheet

            ### GENERAL TASKS END ###
            ### DEMULTIPLEX START ###
            download_samplesheet:
                action: core.http
                input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/samplesheetfile
                    headers:
                        USER: <% $.hermes_user %>
                        X-XSRF-TOKEN: <% $.hermes_token %>
                publish:
                    samplesheet_string: <% task(download_samplesheet).result.body.samplesheet %>
                on-success:
                    - construct_bcl2fastq_body

            # Since we don't want to pass empty values into
            # bcl2fastq-ws, we remove any empty keys from
            # this body.
            construct_bcl2fastq_body:
                action: arteria-packs.parse_bcl2fastq_args
                input:
                    samplesheet: "<% $.samplesheet_string %>"
                    bcl2fastq_version: "<% $.bcl2fastq_version %>"
                    barcode_mismatches: "<% $.barcode_mismatches %>"
                    tiles: "<% $.tiles %>"
                    use_base_mask: "<% $.use_base_mask %>"
                    additional_arguments: "<% $.bcl2fastq_additional_arguments %>"
                publish:
                    bcl2fastq_body: <% task(construct_bcl2fastq_body).result.result %>
                on-success:
                    - run_bcl2fastq

            run_bcl2fastq:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.bcl2fastq_service_port %>/api/1.0/start/<% $.runfolder_name %>"
                    timeout: 86400 # Wait for 24 h before timing out.
                    body: <% $.bcl2fastq_body %>
                on-success: 
                    - save_bcl2fastq_version

            save_bcl2fastq_version: 
                action: core.local
                input:
                    cmd: ssh <% $.host %> "echo <% task(run_bcl2fastq).result.result.response_from_start.response.bcl2fastq_version %> > <% $.runfolder %>/bcl2fastq_version"
                on-success:
                    - conversionstats_workaround: <% $.conversionstats_swap_read_nr = true %>
                    - download_sisyphus_config: <% $.conversionstats_swap_read_nr = false %>

            # Due to a bug in bcl2fastq some read numbers in Unaligned/Stats/ConversionStats.xml will sometimes have the wrong number. 
            # If the Arteria operator manually sets "conversionstats_swap_read"_nr to "true" then this workaround action will swap 
            # the incorrect value "conversionstats_swap_read_from" to the requested correct value "conversionstats_swap_read_to". 
            conversionstats_workaround:
                action: core.local
                input:
                    cmd: ssh <% $.host %> "bash -s" < /opt/stackstorm/packs/arteria-packs/actions/lib/swap_read_nr_in_conversionstats.sh <% $.runfolder %> <% $.conversionstats_swap_read_from %> <% $.conversionstats_swap_read_to %>
                on-success:
                    - download_sisyphus_config

            ## DEMULTIPLEX END ###
            ### QUICK REPORT START ###
            download_sisyphus_config:
                action: core.http
                input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/configfile
                    headers:
                      USER: <% $.hermes_user %>
                      X-XSRF-TOKEN: <% $.hermes_token %>
                publish:
                    sisyphus_conf_string: <% task(download_sisyphus_config).result.body.config %>
                on-success:
                    - construct_report_body

            construct_report_body:
                action: arteria-packs.parse_siswrap_args
                input:
                    runfolder: "<% $.runfolder_name %>"
                    sisyphus_config: "<% $.sisyphus_conf_string %>"
                publish:
                    report_body: <% task(construct_report_body).result.result %>
                on-success:
                    - run_sisyphus_quick_report

            run_sisyphus_quick_report:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/report/run/<% $.runfolder_name %>"
                    body: <% $.report_body %>
                on-success:
                    - run_sisyphus_check_indices
            ### QUICK REPORT END ###

            ### CHECK INDICES START###
            run_sisyphus_check_indices:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/checkindices/run/<% $.runfolder_name %>"
                    body:
                      runfolder: <% $.runfolder_name %>
                    ignore_result: <% $.ignore_sisyphus_qc_result %>
                on-success:
                    - download_qc_config
            ### CHECK INDICES END###

            ### QUALITY CONTROL START ###
            download_qc_config:
                action: core.http
                input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/qcfile
                    headers:
                      USER: <% $.hermes_user %>
                      X-XSRF-TOKEN: <% $.hermes_token %>
                publish:
                    qc_conf_string: <% task(download_qc_config).result.body.qc %>
                on-success:
                    - construct_qc_body

            construct_qc_body:
                action: arteria-packs.parse_siswrap_args
                input:
                    runfolder: "<% $.runfolder_name %>"
                    qc_config: "<% $.qc_conf_string %>"
                publish:
                    qc_body: <% task(construct_qc_body).result.result %>
                on-success:
                    - run_sisyphus_qc

            run_sisyphus_qc:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/qc/run/<% $.runfolder_name %>"
                    body: <% $.qc_body %>
                    ignore_result: <% $.ignore_sisyphus_qc_result %>
                on-success:
                    - get_year
            ### QUALITY CONTROL END ###

            ### TRANSFER FILES TO UPPMAX START ###
            get_year:
              action: core.local
              input:
                cmd: echo 20$(echo <% $.runfolder_name %> | cut -c1-2)
              publish:
                current_year: <% task(get_year).result.stdout %>
              on-success:
                - rsync_to_summary_host

            rsync_to_summary_host:
                action: arteria-packs.rsync
                input:
                    source: <% $.runfolder %>
                    source_host: <% $.host %>
                    source_host_user: "arteria"
                    dest_server: <% $.summary_host %>
                    dest_user: <% $.summary_user %>
                    destination: <% $.summary_destination %>/<% $.current_year %>
                    include_file: /etc/arteria/misc/summary.rsync
                on-success:
                    - check_hosts_to_rsync_to

            check_hosts_to_rsync_to:
               action: core.http
               input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/flowcell/analysishostinfo
                    headers:
                      USER: <% $.hermes_user %>
                      X-XSRF-TOKEN: <% $.hermes_token %>
               on-success:
                    - rsync_to_milou: <% 'milou-b.uppmax.uu.se' in task(check_hosts_to_rsync_to).result.body.remote_hosts %>
                    - make_irma_samplesheet_changes: <% 'irma.uppmax.uu.se' in task(check_hosts_to_rsync_to).result.body.remote_hosts %>

             # Irma requies specific values in the sisyphus.yml to work.
             # This is a hack to replace those specific values for runs
             # which are to be synced to irma.
            make_irma_samplesheet_changes:
               with-items: expression in <% $.irma_replace_expressions %>
               action: core.local
               input:
                 cmd: ssh <% $.host %> sed -i -e \'<% $.expression %>\' <% $.runfolder %>/sisyphus.yml
               on-success:
                 - rsync_to_irma

            rsync_to_milou:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: <% $.remote_host %>
                    destination_user: <% $.remote_user %>
                    destination_path: <% $.remote_destination %>
                    rsync_include_file: /etc/arteria/misc/hiseq.rsync
                    md5_output_file: "checksums.md5"
                on-success:
                    - milou_check_md5sums

            milou_check_md5sums:
                action: core.remote
                input:
                    hosts: <% $.remote_host %>
                    username: <% $.remote_user %>
                    cwd: <% $.remote_destination %>
                    cmd: md5sum -c  <% $.remote_destination %>/<% $.runfolder_name %>/MD5/checksums.md5
                    timeout: 86400 # 24 h timeout
                    private_key: <% $.remote_host_key %>
                on-success:
                    - milou_start_aeacus_stats

            rsync_to_irma:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: "irma2.uppmax.uu.se"
                    destination_user: "funk_901"
                    destination_path: <% $.irma_remote_path %>
                    rsync_include_file: /etc/arteria/misc/hiseq.rsync
                    md5_output_file: "checksums.md5"
                on-success:
                  - irma_check_md5sums

            irma_check_md5sums:
                action: arteria-packs.poll_status
                input:
                    url: <% $.irma_checksum_base_url %>/start/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                    body:
                      path_to_md5_sum_file: "MD5/checksums.md5"
                    verify_ssl_cert: False
                    irma_mode: True
                on-success:
                  - irma_run_aeacus_stats

            ### TRANSFER FILES TO UPPMAX END ###

            ### START AEACUS REPORT STEPS ###
            irma_run_aeacus_stats:
               action: arteria-packs.poll_status
               input:
                    url: <% $.irma_siswrap_base_url %>/aeacusstats/run/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                    body:
                      runfolder: <% $.runfolder_name %>
                    verify_ssl_cert: False
                    irma_mode: True
               on-success:
                 - irma_run_aeacus_reports

            irma_run_aeacus_reports:
               action: arteria-packs.poll_status
               input:
                  url: <% $.irma_siswrap_base_url %>/aeacusreports/run/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                  body:
                    runfolder: <% $.runfolder_name %>
                  verify_ssl_cert: False
                  irma_mode: True
               on-success:
                - upload_runfolder_to_pdc: <% $.skip_archiving = false %>
                - notify_finished: <% $.skip_archiving = true %>
                - mark_as_finished: <% $.skip_archiving = true %>

            ### END AEACUS REPORT STEPS ###
            # TODO Need to add starting the ngi pipeline on irma

            milou_start_aeacus_stats:
                action: core.remote
                input:
                    hosts: <% $.remote_host %>
                    username: <% $.remote_user %>
                    cwd: <% $.remote_destination %>/<% $.runfolder_name %>
                    cmd: <% $.remote_sisyphus_location %>/aeacus-stats.pl -runfolder <% $.remote_destination %>/<% $.runfolder_name %>
                    private_key: <% $.remote_host_key %>
                    env:
                        PERL5LIB: /proj/a2009002/perl/lib/perl5/
                on-success:
                    - milou_start_aeacus_report

            milou_start_aeacus_report:
                action: core.remote
                input:
                    hosts: <% $.remote_host %>
                    username: <% $.remote_user %>
                    cwd: <% $.remote_destination %>/<% $.runfolder_name %>
                    cmd: <% $.remote_sisyphus_location %>/aeacus-reports.pl -runfolder <% $.remote_destination %>/<% $.runfolder_name %>
                    private_key: <% $.remote_host_key %>
                    env:
                        PERL5LIB: /proj/a2009002/perl/lib/perl5/
                on-success:
                    - upload_runfolder_to_pdc: <% $.skip_archiving = false %>
                    - notify_finished: <% $.skip_archiving = true %>
                    - mark_as_finished: <% $.skip_archiving = true %>
            ## START AEACUS REPORT STEPS END ###

            ## START NGI_PIPELINE IF NECESSARY ##
            # TODO Make sure to setup new URL for ngi_pipeline
            #start_ngi_pipeline:
            #  action: core.http
            #  input:
            #    url: <% $.ngi_pipeline_url %>/<% $.runfolder_name %>
            ## END START NGI_PIPELINE ##

            ## START TSM ARCHIVE TO PDC ##
            upload_runfolder_to_pdc:
                action: arteria-packs.archive_workflow
                input:
                    runfolder: <% $.runfolder %>
                    host: <% $.host %>
                    remove_previous_archive: <% $.remove_previous_archive_dir %>
                on-success:
                  - notify_finished
                  - mark_as_finished
            ## END TSM ARCHIVE TO PDC ##

            ## NOTIFIER START ###
            notify_finished:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - Finished processing runfolder <% $.runfolder_name %>'"
                    body: "Finished processing on <% $.host %> for <% $.runfolder_name %>"

            oh_shit_error:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - OH SHIT ERROR occurred for runfolder <% $.runfolder_name %>'"
                    body: "An oh shit error occurred while processing <% $.runfolder_name %> on host <% $.host %>. Please investigate!"
                on-complete:
                  - fail

            mark_as_finished:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "done"}'
                method: "POST"

            mark_as_failed:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "error"}'
                method: "POST"
            ### NOTIFIER END ###
