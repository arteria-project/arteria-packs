version: "2.0" # mistral version
name: arteria-packs.ngi_uu_workflow
description: The ngi workflow, from sequencer to remote system...

workflows:
    main:
        type: direct
        input:
            - host
            - runfolder
            - trigger_ngi_pipeline
            - bcl2fastq_version
            - barcode_mismatches
            - tiles
            - use_base_mask
            - bcl2fastq_additional_arguments
        output:
            output_the_whole_workflow_context: <% $ %>
        task-defaults:
            on-error:
                - oh_shit_error
                - mark_as_failed

        tasks:
            ### GENERAL TASKS START ###
            note_workflow_repo_version:
              action: core.local
              input:
                cmd: git rev-parse HEAD
                cwd: /opt/stackstorm/packs/arteria-packs/
              on-success:
                 - get_config

            get_config:
              action: arteria-packs.get_pack_config
              publish:
                hermes_base_url: <% $.get_config.result.hermes_base_url %>
                hermes_user: <% $.get_config.result.hermes_user %>
                hermes_token: <% $.get_config.result.hermes_token %>
                remote_host: <% $.get_config.result.remote_host %>
                remote_user: <% $.get_config.result.remote_user%>
                remote_destination: <% $.get_config.result.remote_destination %>
                summary_host: <% $.get_config.result.summary_host %>
                summary_user: <% $.get_config.result.summary_user %>
                summary_destination: <% $.get_config.result.summary_destination %>
                siswrap_service_port: <% $.get_config.result.siswrap_service_port %>
                bcl2fastq_service_port: <% $.get_config.result.bcl2fastq_service_port %>
                runfolder_service_port: <% $.get_config.result.runfolder_service_port %>
                send_mail_to: <% $.get_config.result.send_mail_to %>
                remote_sisyphus_location: <% $.get_config.result.remote_sisyphus_location %>
              on-success:
                 - mark_as_started

            mark_as_started:
              action: core.http
              input:               
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "STARTED"}'
                method: "POST"
              on-success:
                - get_runfolder_name

            get_runfolder_name:
              action: core.local
              input:
                cmd: python -c 'import sys; sys.stdout.write("<% $.runfolder %>".split("/")[-1])'
              publish:
                runfolder_name: "<% $.get_runfolder_name.stdout %>"
              on-success:
                - get_flowcell_name

            get_flowcell_name:
                action: arteria-packs.get_flowcell_from_runfolder_name
                input:
                    runfolder_name: <% $.runfolder_name %>
                publish:
                    flowcell_name: <% $.get_flowcell_name.result %>
                on-success:
                    - download_samplesheet
            ### GENERAL TASKS END ###
            ### DEMULTIPLEX START ###
            download_samplesheet:
                action: core.http
                input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/samplesheetfile
                    headers: USER=<% $.hermes_user %>&X-XSRF-TOKEN=<% $.hermes_token %>
                publish:
                    samplesheet_string: <% $.download_samplesheet.body.samplesheet %>
                on-success:
                    # TODO Re-enable this!
                    #- construct_bcl2fastq_body
                    - rsync_to_summary_host

#            # Since we don't want to pass empty values into
#            # bcl2fastq-ws, we remove any empty keys from
#            # this body.
#            construct_bcl2fastq_body:
#                action: arteria-packs.parse_bcl2fastq_args
#                input:
#                    samplesheet: "<% $.samplesheet_string %>"
#                    bcl2fastq_version: "<% $.bcl2fastq_version %>"
#                    barcode_mismatches: "<% $.barcode_mismatches %>"
#                    tiles: "<% $.tiles %>"
#                    use_base_mask: "<% $.use_base_mask %>"
#                    additional_arguments: "<% $.bcl2fastq_additional_arguments %>"
#                publish:
#                    bcl2fastq_body: <% $.construct_bcl2fastq_body.stdout %>
#                on-success:
#                    - run_bcl2fastq
#
#            run_bcl2fastq:
#                action: core.http
#                input:
#                    url: "http://<% $.host %>:<% $.bcl2fastq_service_port %>/api/1.0/start/<% $.runfolder_name %>"
#                    method: "POST"
#                    headers: "Content-Type=application/json"
#                    body: <% $.bcl2fastq_body %>
#                publish:
#                    bcl2fastq_status_url: <% $.run_bcl2fastq.body.link %>
#                on-success:
#                    - poll_demultiplex_status
#
#            poll_demultiplex_status:
#                action: arteria-packs.poll_status
#                input:
#                    url: <% $.bcl2fastq_status_url %>
#                    timeout: 86400 # Wait for 24 h before timing out.
#                on-success:
#                    - download_sisyphus_config
#            ## DEMULTIPLEX END ###
#            ### QUICK REPORT START ###
#            download_sisyphus_config:
#                action: core.http
#                input:
#                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/configfile
#                    headers: USER=<% $.hermes_user %>&X-XSRF-TOKEN=<% $.hermes_token %>
#                publish:
#                    sisyphus_conf_string: <% $.download_sisyphus_config.body.config %>
#                on-success:
#                    - construct_report_body
#
#            construct_report_body:
#                action: arteria-packs.parse_siswrap_args
#                input:
#                    runfolder: "<% $.runfolder_name %>"
#                    sisyphus_config: "<% $.sisyphus_conf_string %>"
#                publish:
#                    report_body: <% $.construct_report_body.stdout %>
#                on-success:
#                    - run_sisyphus_quick_report
#
#            run_sisyphus_quick_report:
#                action: core.http
#                input:
#                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/report/run/<% $.runfolder_name %>"
#                    method: "POST"
#                    headers: "Content-Type=application/json"
#                    body: <% $.report_body %>
#                publish:
#                    report_status_url: "<% $.run_sisyphus_quick_report.body.link %>"
#                on-success:
#                    - poll_report_status
#
#            poll_report_status:
#                action: arteria-packs.poll_status
#                input:
#                    url: "<% $.report_status_url %>"
#                on-success:
#                    - download_qc_config
#            ### QUICK REPORT END ###
#
#            ### QUALITY CONTROL START ###
#            download_qc_config:
#                action: core.http
#                input:
#                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/qcfile
#                    headers: USER=<% $.hermes_user %>&X-XSRF-TOKEN=<% $.hermes_token %>
#                publish:
#                    qc_conf_string: <% $.download_qc_config.body.qc %>
#                on-success:
#                    - construct_qc_body
#
#            construct_qc_body:
#                action: arteria-packs.parse_siswrap_args
#                input:
#                    runfolder: "<% $.runfolder_name %>"
#                    qc_config: "<% $.qc_conf_string %>"
#                publish:
#                    qc_body: <% $.construct_qc_body.stdout %>
#                on-success:
#                    - run_sisyphus_qc
#
#            run_sisyphus_qc:
#                action: core.http
#                input:
#                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/qc/run/<% $.runfolder_name %>"
#                    method: "POST"
#                    headers: "Content-Type=application/json"
#                    body: <% $.qc_body %>
#                publish:
#                    qc_status_url: "<% $.run_sisyphus_qc.body.link %>"
#                on-success:
#                    - poll_qc_status
#
#            poll_qc_status:
#                action: arteria-packs.poll_status
#                input:
#                    url: <% $.qc_status_url %>
#                on-success:
#                    - rsync_to_summary_host
            ### QUALITY CONTROL END ###

            ### TRANSFER FILES TO UPPMAX START ###
            rsync_to_summary_host:
                action: arteria-packs.rsync
                input:
                    source: <% $.runfolder %>
                    source_host: <% $.host %>
                    source_host_user: "arteria"
                    dest_server: <% $.summary_host %>
                    dest_user: <% $.summary_user %>
                    destination: <% $.summary_destination %>
                    include_file: /etc/arteria/misc/summary.rsync
                on-success:
                    - check_hosts_to_rsync_to

            check_hosts_to_rsync_to:
               action: core.http
               input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/flowcell/analysishostinfo
                    headers: USER=<% $.hermes_user %>&X-XSRF-TOKEN=<% $.hermes_token %>
               on-success:
                    - rsync_to_uppmax: True
                    - rsync_to_nestor: <% $.check_hosts_to_rsync_to.body.remote_hosts.contains('nestor.uppmax.uu.se') %>

            rsync_to_uppmax:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: <% $.remote_host %>
                    destination_user: <% $.remote_user %>
                    destination_path: <% $.remote_destination %>
                    rsync_include_file: /etc/arteria/misc/hiseq.rsync
                on-success:
                    - start_aeacus_stats

            rsync_to_nestor:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: "nestor.uppmax.uu.se"
                    destination_user: <% $.remote_user %>
                    destination_path: "/home/joda8933/test_runfolders"
                    rsync_include_file: /etc/arteria/misc/ngi.rsync

            ### TRANSFER FILES TO UPPMAX END ###

            ### START AEACUS REPORT STEPS ###
            start_aeacus_stats:
                action: core.remote
                input:
                    hosts: <% $.remote_host %>
                    username: <% $.remote_user %>
                    cwd: <% $.remote_destination %>/<% $.runfolder_name %>
                    cmd: <% $.remote_sisyphus_location %>/aeacus-stats.pl -runfolder <% $.remote_destination %>/<% $.runfolder_name %>
                    env: 
                        PERL5LIB: /proj/a2009002/perl/lib/perl5/
                on-success:
                    - start_aeacus_report

            start_aeacus_report:
                action: core.remote
                input:
                    hosts: <% $.remote_host %>
                    username: <% $.remote_user %>
                    cwd: <% $.remote_destination %>/<% $.runfolder_name %>
                    cmd: <% $.remote_sisyphus_location %>/aeacus-reports.pl -runfolder <% $.remote_destination %>/<% $.runfolder_name %>
                    env:
                        PERL5LIB: /proj/a2009002/perl/lib/perl5/
                on-success:
                    - notify_finished
                    - mark_as_finished
            ## START AEACUS REPORT STEPS END ###

            ## NOTIFIER START ###
            notify_finished:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - Finished processing runfolder <% $.runfolder_name %>'"
                    body: "Finished processing on <% $.host %> for <% $.runfolder_name %>: <% $.demultiplex_message %> <% $.report_message %> <% $.qc_message %>"

            oh_shit_error:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - OH SHIT ERROR occurred for runfolder <% $.runfolder_name %>'"
                    body: "An oh shit error occurred while processing <% $.runfolder_name %> on host <% $.host %>. Please investigate!"
                on-complete:
                  - fail

            mark_as_finished:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "DONE"}'
                method: "POST"

            mark_as_failed:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "ERROR"}'
                method: "POST"
            ### NOTIFIER END ###
